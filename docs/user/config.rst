.. _config:

Configuring YETI
================

The configuration arguments for a YETI run are stored in a `YAML file <https://en.wikipedia.org/wiki/YAML>`_.
The configuration file (sometimes referred to as "config.yaml") contains all the configurations for a model run.

What goes in the configuration file depends on the Strategy used for the run. You can find example configuration
files for most strategies in the folder ``example/example_configs/``.
We encourage you to adapt the example configuration files to your needs instead of writing your own configuration files from
scratch.

A YETI config file contains the following:

Mode
----

You need to specify a mode. The mode expresses which :ref:`data format <data-formats>`
you would like to use for the run. Add one of the following lines to your configuration file:

.. code-block:: yaml

    mode:       input_data

if you are looking to use ``input_data`` or

.. code-block:: yaml

    mode:       unified_data

if you want to use ``unified_data``.

Pollutant
---------

The pollutant you want to calculate emissions for. Add this line to your configuration file:

.. code-block:: yaml

    pollutant: PollutantType.{pollutant}

For example:

.. code-block:: yaml

    pollutant: PollutantType.NOx


Note that different Strategies support different pollutants. Find out what pollutants a Strategy supports on the
Strategy's documentation page.

Strategy and functions
----------------------

Specify a :ref:`Strategy <what-is-strategy>` in the configuration file:
``strategy:  path.to.a.Strategy``

Along with the Strategy you need to specify functions to work with the data required for the Strategy.
Possible functions are:

- ``load_input_data_function``: The path to a function that converts ``input_data`` to ``unified_data``
  and saves the constructed ``unified_data`` to disc. This argument is only necessary for the ``mode``
  ``input_data``.
- ``load_unified_data_function``: The path to a function that loads ``unified_data`` from disc into memory.
- ``validation_function``: Optional. The path to a function that validates the given data. Validation includes:
  Check that all necessary files are present, Check the column names, check that categorical columns
  use the right categories, check mappings between files, and check that percentage columns contain values
  between 0 and 1.
  Which validation function you want to use depends on the ``mode``. Select a ``validation_function`` that fits the data
  format you are working with.
  If you don't specify a ``validation_function`` in the configuration file, validation is skipped.

Take a look at the docs page for the strategy you want to use to see which functions you should pass in
the configuration file or consult the example configs in ``example/example_configs/``.

*Example*:

.. code-block:: yaml

    strategy:                    code.copert_cold_strategy.CopertColdStrategy.CopertColdStrategy
    load_input_data_function:    code.copert_cold_strategy.load_input_data.load_copert_cold_input_data
    load_unified_data_function:  code.copert_cold_strategy.load_unified_data.load_copert_cold_unified_data
    validation_function:         code.copert_hot_strategy.validate.file_paths_are_valid

Filenames
---------

This section of the configuration file contains paths to the files you intend to use for the model run.
What files are required depends on the Strategy used for the run and on the ``mode``. Find out more on
the Strategy's documentation page.

Output folder(s)
----------------

You need to specify an ``output_folder``. The Model output will be saved in this folder.

You may also specify an ``output_folder_for_unified_data``. If the ``mode`` is ``input_data``, the ``unified_data``
files generated by YETI will be saved in the ``output_folder_for_unified_data``. If no
``output_folder_for_unified_data`` is given, the ``unified_data`` files will be saved in the ``output_folder``.
If you are using ``mode`` ``unified_data``, this argument is ignored.

*Example*:

.. code-block:: yaml

    output_folder:                   emission_output/
    output_folder_for_unified_data   new_unified_data/

Optional config arguments
-------------------------

**links_to_use**

You may specify a list of link IDs that should be used for this run. All links that are not in the given list will be
ignored. Example:

.. code-block:: yaml

    links_to_use:   [42_123, 64_586]   # 42_123 and 64_586 are two link IDs

**use_n_traffic_data_rows**

An integer that specifies how many rows of the traffic data should be used for the run. This config option is
particularly useful for test runs. Example:

.. code-block:: yaml

    use_n_traffic_data_rows:    100


Strategy-specific config arguments
----------------------------------

Each Strategy comes with a set of required and optional configuration arguments. For example the ``CopertColdStrategy``
requires that a ``temperature`` is specified in the config.

You can find out which configuration arguments are needed or possible for each Strategy in the Strategy's
documentation page.
